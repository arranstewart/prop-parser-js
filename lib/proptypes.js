// Generated by CoffeeScript 1.12.7

/**  
 *
 * Classes which represents nodes in an abstract syntax tree
 * for propositional logic formulas.
 *
 * @module
 */

(function() {
  var AndProp, AtomicProp, BiCondProp, CompoundProp, ImplProp, NotProp, OrProp, Prop, asciify, x,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  x = (function() {
    function x() {}

    return x;

  })();


  /**
   * Convert a string containing unicode connectives into ASCII
   */

  asciify = function(str) {
    return str.replace(/\u00AC/g, "~").replace(/\u2227/g, "^").replace(/\u2228/g, "v").replace(/\u2192/g, "->").replace(/\u2194/g, "<->");
  };


  /** 
   * Base clase for propositions.
   * 
   * Child classes intended to be instantiated will have
   * a 'mkText' method, for pretty-printing an instance.
   *
   * Connectives also get
   * a `symbol` method, which gives a (usually Unicode)
   * symbol for that connective.
   *
   * @class
   */

  Prop = (function() {
    function Prop() {}

    return Prop;

  })();

  CompoundProp = (function(superClass) {
    extend(CompoundProp, superClass);

    function CompoundProp(children) {
      this.children = children;
      this.text = this.mkText();
    }

    CompoundProp.prototype.symbol = function() {
      throw "CompoundProp has no symbol";
    };


    /** Pretty-print the proposition as a formula.
     * Recurse over children, and put brackets around compound
     * propositions.
     */

    CompoundProp.prototype.mkText = function() {
      var child, childParenText;
      childParenText = function(child) {
        if (child instanceof CompoundProp && child.children.length > 1) {
          return "(" + child.mkText() + ")";
        } else {
          return child.mkText();
        }
      };
      return ((function() {
        var i, len, ref, results;
        ref = this.children;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          results.push(childParenText(child));
        }
        return results;
      }).call(this)).join(" " + this.symbol() + " ");
    };

    return CompoundProp;

  })(Prop);

  AtomicProp = (function(superClass) {
    extend(AtomicProp, superClass);

    function AtomicProp(char) {
      this.name = char;
      this.text = this.mkText();
    }

    AtomicProp["default"] = function() {
      return new AtomicProp('A');
    };

    AtomicProp.prototype.mkText = function() {
      return this.name;
    };

    return AtomicProp;

  })(Prop);

  NotProp = (function(superClass) {
    extend(NotProp, superClass);

    function NotProp(child) {
      NotProp.__super__.constructor.call(this, [child]);
    }

    NotProp["default"] = function() {
      return new NotProp(new AtomicProp('N'));
    };

    NotProp.prototype.symbol = function() {
      return "\u00AC";
    };

    NotProp.prototype.mkText = function() {
      var child;
      child = this.children[0];
      if (child instanceof CompoundProp) {
        return this.symbol() + "(" + child.mkText() + ")";
      } else {
        return this.symbol() + this.children[0].mkText();
      }
    };

    return NotProp;

  })(CompoundProp);

  AndProp = (function(superClass) {
    extend(AndProp, superClass);

    function AndProp(lchild, rchild) {
      AndProp.__super__.constructor.call(this, [lchild, rchild]);
    }

    AndProp["default"] = function() {
      return new AndProp(new AtomicProp('L'), new AtomicProp('R'));
    };

    AndProp.prototype.symbol = function() {
      return "\u2227";
    };

    return AndProp;

  })(CompoundProp);

  OrProp = (function(superClass) {
    extend(OrProp, superClass);

    function OrProp(lchild, rchild) {
      OrProp.__super__.constructor.call(this, [lchild, rchild]);
    }

    OrProp["default"] = function() {
      return new OrProp(new AtomicProp('L'), new AtomicProp('R'));
    };

    OrProp.prototype.symbol = function() {
      return "\u2228";
    };

    return OrProp;

  })(CompoundProp);

  ImplProp = (function(superClass) {
    extend(ImplProp, superClass);

    function ImplProp(lchild, rchild) {
      ImplProp.__super__.constructor.call(this, [lchild, rchild]);
    }

    ImplProp["default"] = function() {
      return new ImplProp(new AtomicProp('L'), new AtomicProp('R'));
    };

    ImplProp.prototype.symbol = function() {
      return "\u2192";
    };

    return ImplProp;

  })(CompoundProp);

  BiCondProp = (function(superClass) {
    extend(BiCondProp, superClass);

    function BiCondProp(lchild, rchild) {
      BiCondProp.__super__.constructor.call(this, [lchild, rchild]);
    }

    BiCondProp["default"] = function() {
      return new BiCondProp(new AtomicProp('L'), new AtomicProp('R'));
    };

    BiCondProp.prototype.symbol = function() {
      return "\u2194";
    };

    return BiCondProp;

  })(CompoundProp);

  module.exports = {
    Prop: Prop,
    CompoundProp: CompoundProp,
    AtomicProp: AtomicProp,
    NotProp: NotProp,
    AndProp: AndProp,
    OrProp: OrProp,
    ImplProp: ImplProp,
    BiCondProp: BiCondProp,
    asciify: asciify
  };

}).call(this);
